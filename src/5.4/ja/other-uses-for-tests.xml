<?xml version="1.0" encoding="utf-8" ?>

<chapter id="other-uses-for-tests">
  <title>テストのその他の使用法</title>

  <para>
    自動テストに慣れてくると、
    ほかの目的のためにもテストを使いたくなってくることでしょう。
    ここではそんな例を説明します。
  </para>

  <section id="testing-practices.agile-documentation">
    <title>アジャイルな文書作成</title>

    <para>
      <indexterm><primary>Agile Documentation (アジャイルな文書作成)</primary></indexterm>
      <indexterm><primary>Automated Documentation</primary></indexterm>
      <indexterm><primary>Extreme Programming (エクストリームプログラミング)</primary></indexterm>
      <indexterm><primary>TestDox</primary></indexterm>

      一般的に、エクストリームプログラミングのようなアジャイルプロセスを採用しているプロジェクトでは、
      ドキュメントの内容が実際の設計やコードに追いついていないことが多いものです。
      エクストリームプログラミングでは <emphasis>コードの共同所有
      (collective code ownership)</emphasis> を要求しており、
      すべての開発者がシステム全体の動作を知っておく必要があります。
      作成するテストに対して、そのクラスが何を行うべきなのかを示すような
      「わかりやすい」名前をつけられるようにさえしておけば、PHPUnit の
      TestDox 機能を使用して自動的にドキュメントを生成することができます。
      このドキュメントにより、開発者たちはプロジェクト内の各クラスが
      どのようにふるまうべきなのかを知ることができます。
    </para>

    <para>
      PHPUnit の TestDox 機能は、テストクラス内のすべてのテストメソッドの名前を抽出し、
      それを PHP 風のキャメルケースから通常の文に変換します。つまり
      <literal>testBalanceIsInitiallyZero()</literal> が "Balance is initially zero"
      のようになるわけです。最後のほうの数字のみが違うメソッド、例えば
      <literal>testBalanceCannotBecomeNegativeByWithdrawal()</literal> と
      <literal>testBalanceCannotBecomeNegativeByDeposit()</literal> のようなものが存在した場合は、
      文 "Balance cannot become negative" は一度のみ表示され、
      全てのテストが成功したことを表します。
    </para>

    <para>
      <literal>BankAccount</literal> クラスのアジャイルな文書を見てみましょう。
    </para>

    <screen><userinput>phpunit --testdox BankAccountTest</userinput>
PHPUnit 5.4.0 by Sebastian Bergmann and contributors.

BankAccount
 [x] Balance is initially zero
 [x] Balance cannot become negative</screen>

    <para>
      また、アジャイルな文書を HTML あるいはプレーンテキスト形式で作成してファイルに書き出すこともできます。
      この場合は、引数 <literal>--testdox-html</literal>
      あるいは <literal>--testdox-text</literal> を使用します。
    </para>

    <para>
      <indexterm><primary>Documenting Assumptions</primary></indexterm>

      アジャイルな文書は、プロジェクト内であなたが作成しようとしている外部パッケージについて、
      このように動作するであるという期待をまとめた文書にもなります。
      外部のパッケージを使用するときには、
      そのパッケージが期待通りに動作しなくなるというリスクに常にさらされています。
      パッケージのバージョンアップにより知らないうちに挙動が変わってしまい、
      あなたのコードが動作しなくなる可能性もあります。そのようなことを避けるため、
      「このパッケージはこのように動作するはず」
      ということを常にテストケースで記述しておくようにします。テストが成功すれば、
      期待通りに動作していることがわかります。もし動作仕様をすべてテストで記述できているのなら、
      外部パッケージが将来バージョンアップされたとしても何の心配もいりません。
      テストをクリアしたということは、システムは期待通りに動作するということだからです。
    </para>
  </section>

  <section id="testing-practices.cross-team-tests">
    <title>複数チームでのテスト</title>

    <para>
      あるパッケージについての機能を文書化するためにテストを書いているとき、
      そのテストの所有者はあなたです。今あなたがテストを作成しているパッケージの作者は、
      そのテストのことについては何も知りません。パッケージの作者とよりつながりを深めるため、
      作成したテストを使用してコミュニケートしたり、
      そのテストを使用して共同作業をしたりすることができるでしょう。
    </para>

    <para>
      あなたが作成したテストを使用してパッケージの作者と共同作業をすることになれば、
      テストも共同で書くことになります。そうすることで、
      より多くのテストケースを挙げられるようになるでしょう。
      「暗黙の了解」などに頼っていては、共同作業はできません。
      テストと同時に、あなたはそのパッケージに対して期待していることを正確に文書化することになります。
      また、すべてのテストにクリアした時点で、
      作者はパッケージが完成したことを知ることになります。
    </para>

    <para>
      <indexterm><primary>Stubs (スタブ)</primary></indexterm>

      スタブ (本書の前のほうで説明した "モックオブジェクト" の章を参照ください)
      を使用することで、パッケージの作者と別れても作業できるようになります。
      パッケージ作者の仕事は、パッケージの実際の実装でテストをクリアするようにすること。
      そしてあなたの仕事はあなたが書いたコードでテストをクリアするようにすることです。
      この段階になれば、あなたはスタブオブジェクトを使用すればよいのです。
      このやり方により、2 つのチームが独立して開発できるようになります。
    </para>
  </section>
</chapter>
