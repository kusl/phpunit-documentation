<?xml version="1.0" encoding="iso-8859-1" ?>

<chapter id="test-first-programming">
  <title>Test-First-Programmierung</title>

  <caution>
    <para>
      Dies ist die Dokumentation f�r eine Version von PHPUnit, die nicht mehr
      aktuell ist.
    </para>

    <para>
      Die Dokumentation f�r die aktuelle Version von PHPUnit finden Sie
      <ulink url="../../current/en/index.html">hier</ulink>.
    </para>
  </caution>

  <para>
    <indexterm><primary>Design-by-Contract</primary></indexterm>
    <indexterm><primary>Extreme Programming</primary></indexterm>
    <indexterm><primary>Testgetriebene Entwicklung</primary></indexterm>
    <indexterm><primary>Test-First-Programmierung</primary></indexterm>
    <indexterm><primary>Unit Test</primary></indexterm>

    Unit-Tests sind essentieller Bestandteil verschiedener
    Software-Entwicklungsprozesse wie Test-First-Programmierung,
    <ulink url="http://de.wikipedia.org/wiki/Extreme_Programming">Extreme Programming</ulink>
    und <ulink url="http://en.wikipedia.org/wiki/Test-driven_development">testgetriebener Entwicklung</ulink>.
    Ferner erm�glichen Sie die Entwicklung im Stile von
    <ulink url="http://de.wikipedia.org/wiki/Design_by_Contract">Design-by-Contract</ulink>
    in Programmiersprachen wie PHP, die diese Methode nicht auf Sprachebene
    unterst�tzen.
  </para>

  <para>
    Auch wenn Sie PHPUnit verwenden, k�nnen Sie Ihre Tests erst dann
    schreiben, wenn Sie mit dem Programmieren fertig sind. Erinnern Sie sich
    aber an die Erkenntnis, dass Tests umso wertvoller sind, je k�rzer der
    Abstand zwischen ihrer Ausf�hrung und dem Zeitpunkt der potentiellen
    Entstehung eines Fehlers ist. Anstatt also die Tests erst Monate nach
    dem Abschluss der Programmierarbeiten zu schreiben, k�nnen Sie sie auch
    Tage oder Stunden oder Minuten nach dem potentiellen Einf�gen eines
    Mangels in den Code schreiben. Aber warum nicht sogar noch weiter
    gehen? Warum nicht Tests noch etwas fr�her schreiben, und zwar bevor
    �berhaupt ein m�glicher Fehler entstehen kann?
  </para>

  <para>
    Test-First-Programmierung als Bestandteil von Extreme Programming und
    testgetriebener Entwicklung baut auf dieser Idee auf. Die heutige
    Computertechnik gibt uns die M�glichkeit, tausendmal am Tag Tausende
    von Tests auszuf�hren. Die R�ckmeldungen aus allen diesen Tests
    erm�glichen es uns, in kleinen Schritten zu programmieren und jeden
    dieser Schritte durch einen neuen automatisierten Test abzusichern,
    den wir den bereits bestehenden Tests hinzuf�gen. Die Tests haben f�r
    Sie dieselbe Funktion wie die Felshaken f�r Bergsteiger: Sie geben
    Ihnen die Sicherheit, dass Sie, egal was passiert, immer nur das letzte
    St�ck zur�ckfallen k�nnen.
  </para>

  <para>
    Wenn man die Tests zuerst schreibt, lassen sie sich zun�chst nicht
    ausf�hren, da sie Objekt und Methoden verwenden, die noch nicht
    definiert sind. Dies mag einem zun�chst merkw�rdig vorkommen, aber mit
    der Zeit gew�hnt man sich daran. Die Test-First-Programmierung bietet
    eine pragmatische M�glichkeit, um das Prinzip der Programmierung gegen
    eine Schnittstelle an Stelle einer Implementierung umzusetzen: W�hrend
    Sie die Tests schreiben denken Sie �ber die Schnittstelle des Objekts
    nach, das Sie gerade testen -- wie sieht dieses Objekt von aussen aus?
    Wenn Sie daran gehen, den tats�chlichen Code zu schreiben, der hinter
    dem getesteten Objekt steht, denken Sie nur �ber die Implementierung
    nach. Die Schnittstelle ist durch den fehlschlagenden Test
    festgelegt.
  </para>

  <para>
    Was nun folgt, ist eine zwangsl�ufig verk�rzte Einf�hrung in die
    Test-First-Programmierung. Es gibt andere B�cher, mit deren Hilfe Sie
    sich tiefer in dieses Thema einarbeiten k�nnen, zum Beispiel
    <emphasis>Test-Driven Development: By Example</emphasis>
    <xref linkend="Beck2002" /> von Kent Beck oder
    <emphasis>Test-Driven Development: A Practical Guide</emphasis>
    <xref linkend="Astels2003" /> von Dave Astels.
  </para>

  <section id="test-first-programming.bankaccount-example">
    <title>Beispiel: Bankkonto</title>

    <para>
      Als Beispiel betrachten wir eine Klasse, die ein Bankkonto
      repr�sentieren soll. Der Vertrag f�r diese Klasse sieht nicht nur
      Methoden f�r den lesenden und schreibenden Zugriff auf das Bankkonto
      vor, sondern auch die Einhaltung der beiden folgenden Bedingungen:
    </para>

    <itemizedlist>
      <listitem>
        <para>Der Kontostand ist zu Beginn null.</para>
      </listitem>

      <listitem>
        <para>Der Kontostand kann nicht negativ werden.</para>
      </listitem>
    </itemizedlist>

    <para>
      Der Test-First-Programmierung folgend, schreiben Sie die Tests f�r
      die Klasse <literal>BankAccount</literal> bevor Sie die Klasse selber
      schreiben. Sie benutzen die Vertragsbedingungen als Ausgangspunkt f�r
      die Tests und benennen die Testmethoden entsprechend, wie in
      <xref linkend="test-first-programming.bankaccount-example.examples.BankAccountTest.php" />
      gezeigt.
    </para>

    <example id="test-first-programming.bankaccount-example.examples.BankAccountTest.php">
      <title>Tests f�r die BankAccount-Klasse</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Framework/TestCase.php';
require_once 'BankAccount.php';

class BankAccountTest extends PHPUnit2_Framework_TestCase {
    private $ba;

    protected function setUp() {
        $this->ba = new BankAccount;
    }

    public function testBalanceIsInitiallyZero() {
        $this->assertEquals(0, $this->ba->getBalance());
    }

    public function testBalanceCannotBecomeNegativeByWithdrawal() {
        try {
            $this->ba->withdrawMoney(1);
        }

        catch (Exception $e) {
            return;
        }

        $this->fail();
    }

    public function testBalanceCannotBecomeNegativeByDeposit() {
        try {
            $this->ba->depositMoney(-1);
        }

        catch (Exception $e) {
            return;
        }

        $this->fail();
    }

    public function testBalanceCannotBecomeNegativeBySetBalance() {
        try {
            $this->ba->setBalance(-1);
        }

        catch (Exception $e) {
            return;
        }

        $this->fail();
    }
}
?>]]></programlisting>
    </example>

    <para>
      Nun schreiben Sie den minimal ben�tigten Code, damit der erste Test,
      <literal>testBalanceIsInitiallyZero()</literal>, erfolgreich laufen
      kann. Dies bedeutet, dass Sie die Methode <literal>getBalance()</literal>
      der Klasse <literal>BankAccount</literal>, wie in
      <xref linkend="test-first-programming.bankaccount-example.examples.BankAccount.php" />
      gezeigt, implementieren.
    </para>

    <example id="test-first-programming.bankaccount-example.examples.BankAccount.php">
      <title>Ben�tigter Code, damit der erste Test erfolgreich laufen kann</title>
      <programlisting><![CDATA[<?php
class BankAccount {
    private $balance = 0;

    public function getBalance() {
        return $this->balance;
    }
}
?>]]></programlisting>
    </example>

    <para>
      Der Test f�r die erste Vertragsbedingung l�uft nun erfolgreich. Die
      Tests f�r die zweite Vertragsbedingung schlagen allerdings noch fehl,
      da die entsprechenden Methoden der Klasse <literal>BankAccount</literal>
      noch nicht implementiert worden sind.
    </para>

    <screen><userinput>phpunit BankAccountTest</userinput>
PHPUnit 2.3.0 by Sebastian Bergmann.

.
Fatal error: Call to undefined method BankAccount::withdrawMoney()</screen>

    <para>
      Damit die Tests, die die Einhaltung der zweiten Vertragsbedingung
      �berwachen, erfolgreich laufen k�nnen, m�ssen Sie die Methoden
      <literal>withdrawMoney()</literal>, <literal>depositMoney()</literal>
      und <literal>setBalance()</literal> der Klasse
      <literal>BankAccount</literal>, wie in
      <xref linkend="test-first-programming.bankaccount-example.examples.BankAccount2.php" />
      gezeigt, implementieren. Diese Methoden werden so implementiert, dass sie
      eine <literal>InvalidArgumentException</literal> ausl�sen, wenn sie mit
      Parameterwerten, die den Vertrag verletzen w�rden, aufgerufen werden.
    </para>

    <example id="test-first-programming.bankaccount-example.examples.BankAccount2.php">
      <title>Die vollst�ndige BankAccount-Klasse</title>
      <programlisting><![CDATA[<?php
class BankAccount {
    private $balance = 0;

    public function getBalance() {
        return $this->balance;
    }

    public function setBalance($balance) {
        if ($balance >= 0) {
            $this->balance = $balance;
        } else {
            throw new InvalidArgumentException;
        }
    }

    public function depositMoney($amount) {
        if ($amount >= 0) {
            $this->balance += $amount;
        } else {
            throw new InvalidArgumentException;
        }
    }

    public function withdrawMoney($amount) {
        if ($amount >= 0 && $this->balance >= $amount) {
            $this->balance -= $amount;
        } else {
            throw new InvalidArgumentException;
        }
    }
}
?>]]></programlisting>
    </example>

    <para>
      Die Tests f�r die zweite Vertragsbedingung laufen nun ebenfalls
      erfolgreich:
    </para>

    <screen><userinput>phpunit BankAccountTest</userinput>
PHPUnit 2.3.0 by Sebastian Bergmann.

....

Time: 0.057038

OK (4 tests)</screen>

    <para>
      <indexterm><primary>PHPUnit2_Framework_Assert</primary></indexterm>

      Alternativ k�nnen Sie die statischen Methoden der Klasse
      <literal>PHPUnit2_Framework_Assert</literal> verwenden, um die
      Zusicherungen im Stile von Design-by-Contract in den Code zu
      schreiben, wie in
      <xref linkend="test-first-programming.bankaccount-example.examples.BankAccount3.php" />
      gezeigt. Wenn eine Zusicherung fehlschl�gt wird eine Ausnahme vom Typ
      <literal>PHPUnit2_Framework_AssertionFailedError</literal> ausgel�st.
      Auf diese Weise m�ssen Sie weniger Code f�r die �berpr�fung der
      Parameterwerte schreiben und die Tests werden lesbarer. Allerdings
      f�gen Sie Ihrem Projekt eine Laufzeitabh�ngigkeit auf PHPUnit hinzu.
    </para>

    <example id="test-first-programming.bankaccount-example.examples.BankAccount3.php">
      <title>Die BankAccount-Klasse mit Zusicherungen im Stile von Design-by-Contract</title>
      <programlisting><![CDATA[<?php
require_once 'PHPUnit2/Framework/Assert.php';

class BankAccount {
    private $balance = 0;

    public function getBalance() {
        return $this->balance;
    }

    public function setBalance($balance) {
        PHPUnit2_Framework_Assert::assertTrue($balance >= 0);

        $this->balance = $balance;
    }

    public function depositMoney($amount) {
        PHPUnit2_Framework_Assert::assertTrue($amount >= 0);

        $this->balance += $amount;
    }

    public function withdrawMoney($amount) {
        PHPUnit2_Framework_Assert::assertTrue($amount >= 0);
        PHPUnit2_Framework_Assert::assertTrue($this->balance >= $amount);

        $this->balance -= $amount;
    }
}
?>]]></programlisting>
    </example>

    <para>
      Durch das Schreiben der Vertragsbedingungen in die Tests haben wir
      Design-by-Contract benutzt, um die <literal>BankAccount</literal>-Klasse
      zu entwerfen. Danach haben wir, dem Ansatz der Test-First-Programmierung
      folgend, nur soviel Code geschrieben, wie f�r das erfolgreiche
      Durchlaufen der Tests n�tig ist. Allerdings haben wir vergessen, Tests
      zu schreiben, die <literal>setBalance()</literal>,
      <literal>depositMoney()</literal> und <literal>withdrawMoney()</literal>
      mit zul�ssigen Parametern aufrufen. Wir ben�tigen ein Hilfsmittel, um
      die Qualit�t unserer Tests zu �berpr�fen. Ein solches Hilfsmittel ist
      die Code-Coverage-Analyse, die wir im n�chsten Kapitel kennenlernen
      werden.
    </para>
  </section>
</chapter>
