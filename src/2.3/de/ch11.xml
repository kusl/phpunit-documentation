<?xml version="1.0" encoding="iso-8859-1" ?>

<chapter id="other-uses-for-tests">
  <title>Weitere Anwendungsm�glichkeiten f�r Tests</title>

  <caution>
    <para>
      Dies ist die Dokumentation f�r eine Version von PHPUnit, die nicht mehr
      aktuell ist.
    </para>

    <para>
      Die Dokumentation f�r die aktuelle Version von PHPUnit finden Sie
      <ulink url="../../current/en/index.html">hier</ulink>.
    </para>
  </caution>

  <para>
    Wenn Sie sich erst einmal daran gew�hnt haben, automatisierte Tests zu
    schreiben, werden Sie vermutlich weitere Anwendungsm�glichkeiten daf�r
    entdecken. Hier sind einige Beispiele.
  </para>

  <section id="other-uses-for-tests.agile-documentation">
    <title>Agile Dokumentation</title>

    <para>
      <indexterm><primary>Agile Dokumentation</primary></indexterm>
      <indexterm><primary>Automatisierte Dokumentation</primary></indexterm>
      <indexterm><primary>Extreme Programming</primary></indexterm>
      <indexterm><primary>TestDox</primary></indexterm>

      In einem Projekt, das mit einem agilen Software-Entwicklungsprozess wie
      dem Extreme Programming entwickelt wird, kommt es h�ufig vor, dass die
      Dokumentation nicht mit den �nderungen an Code und Design Schritt
      halten kann. Extreme Programming verlangt <emphasis>kollektives Eigentum
      des Codes</emphasis>. Daher m�ssen alle Entwickler wissen, wie das
      gesamte System funktioniert. Wenn Sie diszipliniert genug sind und
      konsequent "sprechende Namen" f�r Ihre Tests verwenden, k�nnen Sie
      mit Hilfe der TestDox-Funktionalit�t von PHPUnit automatisch
      Dokumentation f�r Ihr Projekt auf Grundlage der Tests erstellen. Diese
      Dokumentation gibt den Entwicklern einen �berblick �ber die Klassen
      des Projekts, und was von ihnen erwartet wird.
    </para>

    <para>
      Die TestDox-Funktionalit�t von PHPUnit betrachtet die Testmethoden und
      erzeugt aus der Camel-Case-Notation der PHP-Namen S�tze: aus
      <literal>testBalanceIsInitiallyZero()</literal> wird "Balance is initially
      zero". Gibt es mehrere Testmethoden, deren Namen sich nur durch eine
      Ziffer am Ende unterscheiden (beispielsweise
      <literal>testBalanceCannotBecomeNegativeByWithdrawal()</literal> und
      <literal>testBalanceCannotBecomeNegativeByDeposit()</literal>), so wird der
      entsprechende Satz ("Balance cannot become negative") nur einmal
      erzeugt, und zwar dann, wenn alle diese Testmethoden erfolgreich
      durchlaufen wurden.
    </para>

    <para>
      Das folgende Beispiel zeigt die mit
      <userinput>phpunit --testdox-text BankAccountTest.txt BankAccountTest</userinput>
      f�r die Tests aus
      <xref linkend="test-first-programming.bankaccount-example.examples.BankAccountTest.php" />
      erstellte agile Dokumentation.
    </para>

    <screen>BankAccount
 - Balance is initially zero
 - Balance cannot become negative</screen>

    <para>
      Alternativ kann die agile Dokumentation mit
      <literal>--testdox-html BankAccountTest.htm</literal> auch im
      HTML-Format erstellt werden.
    </para>

    <para>
      <indexterm><primary>Dokumentieren von Pr�missen</primary></indexterm>

      Wenn Sie sich dazu entschlie�en, bei der Entwicklung ein externes Paket
      einzusetzen, gehen Sie damit ein gewisses Risiko ein. Es ist nicht
      auszuschlie�en, dass sich das Paket nicht so verh�lt, wie Sie es
      erwarten, und dass sich zuk�nftige Versionen in subtiler Weise so
      ver�ndern, dass Ihre Programme nicht mehr funktionieren, ohne dass Sie
      es merken. Eine M�glichkeit, dieses Problem zu l�sen, besteht darin,
      Annahmen �ber die Funktionsweise des externen Paketes durch Tests und
      agile Dokumentation zu dokumentieren: Jedes Mal, wenn Sie eine Annahme
      treffen, schreiben Sie einen Test. Wird der Test bestanden, ist Ihre
      Pr�misse g�ltig. Wenn Sie die erforderliche Disziplin aufbringen und
      alle Annahmen durch Tests ausdr�cken, dann brauchen Sie in der Zukunft
      neue Versionen des externen Paketes nicht zu f�rchten. Sie lassen Ihre
      Testreihe laufen, und wenn diese erfolgreich verl�uft, so k�nnen Sie
      davon ausgehen, dass Ihre Programme weiterhin wie erwartet
      funktionieren. Andernfalls m�ssen Sie n�her untersuchen, was sich
      ge�ndert hat.
    </para>
  </section>

  <section id="other-uses-for-tests.cross-team-tests">
    <title>Team�bergreifende Tests</title>

    <para>
      Wenn Sie Tests dazu verwenden, Pr�missen zu dokumentieren, geh�ren die
      Tests Ihnen. In diesem Fall haben Sie mit dem Lieferanten des Pakets,
      auf das Sie sich verlassen k�nnen m�ssen, eine eher distanzierte
      Beziehung. Ist die Beziehung zu dem Hersteller aber enger oder streben
      Sie eine engere Beziehung an, so k�nnen Tests eine M�glichkeit zur
      Koordination Ihrer Aktivit�ten sein.
    </para>

    <para>
      K�nnen Sie sich mit dem Ersteller auf eine API einigen, ist es Ihnen
      m�glich, die Tests gemeinsam zu schreiben und zu pflegen. Sie setzen
      sich mit dem Lieferanten zusammen und codieren die Tests so, dass sie
      so viele Pr�missen wie m�glich deutlich machen. Versteckte
      Anforderungen sind der Tod jeder Kooperation. Anhand der Tests wei�
      der Hersteller genau, was von ihm erwartet wird. Er braucht erst
      wiederzukommen, wenn alle Tests erfolgreich laufen.
    </para>

    <para>
      <indexterm><primary>Stubs</primary></indexterm>

      Mit dem Konzept der Stubs aus dem vorigen Kapitel k�nnen Sie die beiden
      Teams noch weiter entkoppeln:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Die Aufgabe des Herstellerteams besteht darin, die Tests zum
          Laufen zu bringen, indem es die Stub-Objekte durch reale
          Implementierungen ersetzt.
        </para>
      </listitem>

      <listitem>
        <para>
          Ihre Aufgabe ist es, daf�r zu sorgen, dass Ihr eigener Code mit den
          Stub-Objekten funktioniert, bis er schlie�lich die eigentliche
          Implementierung erh�lt.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Auf diese Weise k�nnen beide Teams unabh�ngig voneinander arbeiten.
    </para>
  </section>

  <section id="other-uses-for-tests.debugging-tests">
    <title>Debugging mit Tests</title>

    <para>
      Wenn Sie eine Fehlermeldung erhalten, so mag Ihre spontane Reaktion
      darauf sein, den Fehler so schnell wie m�glich zu beheben. Diese Neigung
      ist aber selten hilfreich, da es sehr wahrscheinlich ist, dass Sie mit
      Ihrer "Reparatur" einen anderen Fehler verursachen.
    </para>

    <para>
      Tests bieten eine M�glichkeit, diesen spontane Drang im Zaum zu
      halten.
    </para>

    <orderedlist>
      <listitem>
        <para>
          Verifizieren Sie, dass Sie den Fehler reproduzieren k�nnen.
        </para>
      </listitem>

      <listitem>
        <para>
          Finden Sie die kleinstm�gliche Programmeinheit, in der sich der
          Fehler noch darstellen l�sst. Wenn beispielsweise eine Zahl in der
          Ausgabe fehlerhaft dargestellt wird, suchen Sie das Objekt, das
          diese Zahl berechnet.
        </para>
      </listitem>

      <listitem>
        <para>
          Schreiben Sie einen automatisierten Test, der jetzt versagt, aber
          der erfolgreich verlaufen muss, wenn der Mangel behoben ist.
        </para>
      </listitem>

      <listitem>
        <para>
          Beseitigen Sie den Fehler.
        </para>
      </listitem>
    </orderedlist>

    <para>
      Die Suche nach der kleinstm�glichen zuverl�ssigen Reproduktion des
      Fehlers gibt Ihnen die M�glichkeit, sich wirklich auf die Ursache des
      Problems zu konzentrieren. Der Test, den Sie schreiben, erh�ht die
      Wahrscheinlichkeit, dass Sie durch die Reparatur wirklich nur den
      Fehler beseitigen. Zus�tzlich vermindert der neue Test die
      Wahrscheinlichkeit, dass die Korrektur zu einem sp�teren Zeitpunkt
      versehentlich r�ckg�ngig gemacht wird. Die bereits existierenden Tests
      tragen daf�r Sorge, dass die Korrektur des aktuellen Problems
      ihrerseits keine neuen Probleme verursacht.
    </para>
  </section>

  <section id="other-uses-for-tests.refactoring">
    <title>Refactoring mit Tests</title>

    <para>
      <indexterm><primary>Refactoring</primary></indexterm>

      Erst automatisierte Tests machen die zum Erreichen des einfachsten
      Designs n�tigen �nderungen (Refactoring, "neu herstellen") am Code
      sinnvoll durchf�hrbar. Ohne sie m�sste jede Methode einer jeden
      Klasse von Hand getestet werden, wenn der Code einer Klasse ge�ndert
      wurde. Der Vorgang des Refactoring kann in kleine Einzelschritte
      aufgeteilt werden, die verhaltensneutral sind.
    </para>

    <para>
      Die folgenden Schritte helfen Ihnen, Code und Design Ihres Projekts
      zu verbessern, und dabei jeden Einzelschritt mit Unit-Tests
      abzusichern, damit das Ergebnis wirklich verhaltensneutral ist:
    </para>

    <orderedlist>
      <listitem>
        <para>Alle Unit-Tests laufen.</para>
      </listitem>

      <listitem>
        <para>Der Code kommuniziert alle seine Designkonzepte.</para>
      </listitem>

      <listitem>
        <para>Der Code enth�lt keine Redundanz.</para>
      </listitem>

      <listitem>
        <para>Der Code enth�lt, unter Ber�cksichtigung der obigen Regeln, die geringstm�gliche Anzahl an Klassen und Methoden.</para>
      </listitem>
    </orderedlist>
  </section>
</chapter>
